name: update-release

on: push


jobs:
  update_release:
    name: update_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-10.15]
        python-version: ['3.9']
    steps:
      - name: View the github context
        run: echo "$GITHUB_CONTEXT"
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
      - name: Get the tag
        id: get_tag
        shell: bash
        run: |
          echo "Setting tag as: ${GITHUB_REF#refs/tags/}"
          echo "${{ github.event.release.assets_url }}"
          echo ::set-output name=TAG::${GITHUB_REF#refs/tags/}
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup scripts
        uses: actions/checkout@v2
        with:
          repository: hsorby/mapclientreleasescripts
          path: scripts
          ref: main
      - name: Determine required assets
        id: req_assets
        shell: cmake -P {0}
        run: |
          set(RELEASE_BODY "${{ github.event.release.body }}")

          string(REPLACE "\n" ";" _PARTS "${RELEASE_BODY}")

          foreach(_PART ${_PARTS})
            string(STRIP "${_PART}" _PART)
            if ("${_PART}" STREQUAL "[cd release with mapping tools]")
              message(STATUS "Require a MAP Client mapping tools variant.")
              message("::set-output name=INCLUDE_MAPPING_TOOLS::true")
            endif()
            if ("${_PART}" STREQUAL "[cd release with installer]")
              message(STATUS "Require a MAP Client installer.")
              message("::set-output name=INCLUDE_INSTALLER::true")
            endif()
          endforeach()
      - name: Install create-dmg
        if: runner.os == 'macOS'
        shell: bash
        run: brew install create-dmg
      - name: Create installer asset
        shell: bash
        run: |
          echo "Creating installer asset"
          python -m venv venv
          ls venv/
          if [ "$RUNNER_OS" == "macOS" ]; then
            python_exe=$GITHUB_WORKSPACE/venv/bin/python
            # source venv/bin/activate
          elif [ "$RUNNER_OS" == "Windows" ]; then
            python_exe=$GITHUB_WORKSPACE/venv/Scripts/python.exe
            # source venv/Scripts/activate
          else
            echo "$RUNNER_OS not supported"
            exit 1
          fi
          cd $GITHUB_WORKSPACE
          cd scripts
          # ${{ steps.get_tag.outputs.tag }}
          python prepare_mapclient_release.py main
          ls -lh
          ls -lh mapclient
          ls -lh mapclient/res
          ls -lh mapclient/res/macos
          chmod 755 mapclient/res/macos/*.dmg
          asset=`mapclient/res/macos/*.dmg`
          #ls mapclient/res/macos/*.dmg
          echo $asset
          echo "Upload it ..."
      - name: Create mapping tools assets
        shell: bash
        if: ${{ steps.req_assets.outputs.include_mapping_tools }}
        run: |
          echo "Creating mapping tools asset"
          venv_name=venv-mapping-tools
          python -m venv $venv_name

          if [ "$RUNNER_OS" == "macOS" ]; then
            python_exe=$GITHUB_WORKSPACE/venv/bin/python
          elif [ "$RUNNER_OS" == "Windows" ]; then
            python_exe=$GITHUB_WORKSPACE/venv/Scripts/python.exe
          else
            echo "$RUNNER_OS not supported"
            exit 1
          fi
          scripts_dir=$GITHUB_WORKSPACE/scripts
          cd $scripts_dir
          # ${{ steps.get_tag.outputs.tag }}
          echo "$python_exe"
          $python_exe prepare_mapclient_release.py main -v mapping-tools -p $scripts_dir/plugin_listing.txt -w $scripts_dir/workflow_listing.txt

