name: update-release

on: push

jobs:
  build_setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Get the tag
        id: get-tag
        shell: bash
        run: |
          echo "Setting tag as: ${GITHUB_REF#refs/tags/}"
          echo "${{ github.event.release.assets_url }}"
#          echo ::set-output name=TAG::${GITHUB_REF#refs/tags/}
          echo ::set-output name=TAG::main
      - name: Determine required assets
        id: req-assets
        shell: cmake -P {0}
        run: |
          set(RELEASE_BODY "${{ github.event.release.body }}")

          string(REPLACE "\n" ";" _PARTS "${RELEASE_BODY}")

          foreach(_PART ${_PARTS})
            string(STRIP "${_PART}" _PART)
            if ("${_PART}" STREQUAL "[cd release with mapping tools]")
              message(STATUS "Require a MAP Client mapping tools variant.")
              message("::set-output name=INCLUDE_MAPPING_TOOLS::true")
            endif()
            if ("${_PART}" STREQUAL "[cd release with installer]")
              message(STATUS "Require a MAP Client installer.")
              message("::set-output name=INCLUDE_INSTALLER::true")
            endif()
          endforeach()
          message("::set-output name=INCLUDE_INSTALLER::true")
      - name: set_matrix
        id: set-matrix
        run: |
          function join_by { local IFS="$1"; shift; echo "$*"; }
          matrixElements=()
          if [ "${{ steps.req-assets.outputs.include_installer }}" == "true" ]; then
            matrixElements+=('{"os":"windows-2019","variant":"mapclient","tag":"${{ steps.get-tag.outputs.tag }}"}')
            matrixElements+=('{"os":"macos-10.15","variant":"mapclient","tag":"${{ steps.get-tag.outputs.tag }}"}')
          fi
          if [ "${{ steps.req-assets.outputs.include_mapping_tools }}" == "true" ]; then
            matrixElements+=('{"os":"windows-2019","variant":"mapping-tools","tag":"${{ steps.get-tag.outputs.tag }}"}')
            matrixElements+=('{"os":"macos-10.15","variant":"mapping-tools","tag":"${{ steps.get-tag.outputs.tag }}"}')
          fi
          content=`join_by ,  ${matrixElements[@]}`
          echo "::set-output name=matrix::{\"include\":[$content]}"
  build_asset:
    needs: build_setup
    name: build_asset
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{fromJson(needs.build_setup.outputs.matrix)}}
    steps:
      - name: Install create-dmg
        if: runner.os == 'macOS'
        shell: bash
        run: brew install create-dmg
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup scripts
        uses: actions/checkout@v2
        with:
          repository: hsorby/mapclientreleasescripts
          path: scripts
          ref: main
      - name: Create installer asset
        shell: bash
        run: |
          echo "Creating installer asset"
          python -m venv venv
          ls venv/
          if [ "$RUNNER_OS" == "macOS" ]; then
            python_exe=$GITHUB_WORKSPACE/venv/bin/python
            # source venv/bin/activate
          elif [ "$RUNNER_OS" == "Windows" ]; then
            python_exe=$GITHUB_WORKSPACE/venv/Scripts/python.exe
            # source venv/Scripts/activate
          else
            echo "$RUNNER_OS not supported"
            exit 1
          fi
          cd $GITHUB_WORKSPACE
          cd scripts
          # ${{ steps.get_tag.outputs.tag }}
          if [ "${{ matrix.variant }}" == "mapclient" ]; then
            $python_exe prepare_mapclient_release.py ${{ matrix.tag }}
          elif [ "${{ matrix.variant }}" == "mapping-tools" ]; then
            $python_exe prepare_mapclient_release.py ${{ matrix.tag }} -v mapping-tools -p $scripts_dir/plugin_listing.txt -w $scripts_dir/workflow_listing.txt
          else
            echo "Variant not supported"
            exit 2
          fi
          ls -lh
          ls -lh mapclient
          if [ "$RUNNER_OS" == "macOS" ]; then
            ls -lh mapclient/res
            ls -lh mapclient/res/macos
            # chmod 755 mapclient/res/macos/*.dmg
            #asset=`mapclient/res/macos/*.dmg`
            # ls mapclient/res/macos/*.dmg
          elif [ "$RUNNER_OS" == "Windows" ]; then
            ls -lh mapclient/package
          else
            echo "$RUNNER_OS not supported"
            exit 1
          fi
          # echo $asset
          echo "Upload it ..."
